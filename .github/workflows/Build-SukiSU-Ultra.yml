name: Build SukiSU Ultra

on:
  workflow_dispatch:
    inputs:
      CPU:
        description: "分支（SoC平台）"
        type: choice
        required: true
        default: sm8550
        options:
          - sm7550
          - sm7675
          - sm8450
          - sm8475
          - sm8550
          - sm8650
          - sm8750
      FEIL:
        description: "配置文件"
        type: choice
        required: true
        default: oneplus_ace3_v
        options:
          - oneplus_nord_ce4_v
          - oneplus_ace_3v_v
          - oneplus_nord_4_v
          - oneplus_10_pro_v
          - oneplus_10t_v
          - oneplus_11r_v
          - oneplus_ace2_v
          - oneplus_ace_pro_v
          - oneplus_11_v
          - oneplus_12r_v
          - oneplus_ace2pro_v
          - oneplus_ace3_v
          - oneplus_open_v
          - oneplus12_v
          - oneplus_13r
          - oneplus_ace3_pro_v
          - oneplus_ace5
          - oneplus_pad2_v
          - oneplus_13
          - oneplus_ace5_pro
          - oneplus_13t
      CPUD:
        description: "处理器代号"
        type: choice
        required: true
        default: kalama
        options:
          - crow
          - waipio
          - kalama
          - pineapple
          - sun
      ANDROID_VERSION:
        description: "内核安卓版本"
        type: choice
        required: true
        default: android13
        options:
          - android12
          - android13
          - android14
          - android15
      KERNEL_VERSION:
        description: "内核版本"
        type: choice
        required: true
        default: "5.15"
        options:
          - "5.10"
          - "5.15"
          - "6.1"
          - "6.6"
      BUILD_METHOD:
        description: "编译方式"
        type: choice
        required: true
        default: gki
        options:
          - gki
          - perf
      ZRAM:
        description: "是否启用更多ZRAM（推荐开启）"
        type: boolean
        required: true
        default: true

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      LANG: C
      LC_ALL: C
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
      CCACHE_DIR: /home/runner/.ccache
      CCACHE_MAXSIZE: 8G
      BUILD_THREADS: 4
    steps:
      - name: 最大化构建空间
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'

      - name: 缓存APT包
        uses: actions/cache@v4
        with:
          path: /var/cache/apt/archives
          key: apt-cache-${{ runner.os }}-${{ hashFiles('**/.github/workflows/build-sukisu-ultra.yaml') }}

      - name: 安装编译依赖
        run: |
          sudo apt update
          sudo apt install -y python3 git curl ccache unzip libelf-dev lld llvm clang llvm-dev

      - name: 缓存依赖下载
        uses: actions/cache@v4
        with:
          path: ~/.cache
          key: python-cache-${{ runner.os }}-${{ hashFiles('**/requirements.txt') }}

      - name: 检出仓库
        uses: actions/checkout@v4

      - name: 获取manifest并生成哈希
        id: manifest_hash
        run: |
          mkdir -p kernel_workspace
          # 检查manifest实际是否存在
          MANIFEST_URL="https://raw.githubusercontent.com/OnePlusOSS/kernel_manifest/refs/heads/oneplus/${{ github.event.inputs.CPU }}/${{ github.event.inputs.FEIL }}.xml"
          if ! curl --silent --fail "$MANIFEST_URL" -o kernel_workspace/manifest.xml; then
            echo "❌ manifest 文件 ${{ github.event.inputs.FEIL }}.xml 不存在于 oneplus/${{ github.event.inputs.CPU }} 分支，请检查参数！"
            exit 1
          fi
          echo "hash=$(sha256sum kernel_workspace/manifest.xml | awk '{print $1}')" >> $GITHUB_OUTPUT

      - name: 恢复repo与源码缓存（极致加速）
        uses: actions/cache@v4
        with:
          path: |
            kernel_workspace/.repo
            kernel_workspace/kernel_platform
          key: repo-src-${{ runner.os }}-${{ github.event.inputs.CPU }}-${{ github.event.inputs.FEIL }}-${{ github.event.inputs.KERNEL_VERSION }}-${{ steps.manifest_hash.outputs.hash }}

      - name: 缓存ccache
        uses: actions/cache@v4
        with:
          path: /home/runner/.ccache
          key: ccache-${{ runner.os }}-${{ github.event.inputs.CPU }}-${{ github.event.inputs.FEIL }}-${{ github.event.inputs.KERNEL_VERSION }}-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.CPUD }}-${{ github.event.inputs.BUILD_METHOD }}-${{ steps.manifest_hash.outputs.hash }}
          restore-keys: |
            ccache-${{ runner.os }}-${{ github.event.inputs.CPU }}-

      - name: 配置Git信息
        run: |
          git config --global user.name "FurLC"
          git config --global user.email "qq441791056@163.com"

      - name: 安装repo工具
        run: |
          curl --retry 3 https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
          chmod a+x ~/repo
          sudo mv ~/repo /usr/local/bin/repo

      - name: 初始化repo并同步源码
        run: |
          cd kernel_workspace
          if [ ! -d ".repo" ]; then
            repo init -u https://github.com/OnePlusOSS/kernel_manifest.git \
              -b refs/heads/oneplus/${{ github.event.inputs.CPU }} \
              -m ${{ github.event.inputs.FEIL }}.xml --depth=1
          fi
          if [ ! -d "kernel_platform" ]; then
            repo sync -c --fail-fast --force-sync --no-tags --no-clone-bundle -j2
          fi
          # 校验 defconfig 是否存在
          if [ ! -f kernel_platform/common/arch/arm64/configs/gki_defconfig ]; then
            echo "❌ kernel_platform/common/arch/arm64/configs/gki_defconfig 不存在！repo sync 失败或 manifest 配置有误。"
            exit 2
          fi
          # 清理abi导出和-dirty标记
          rm kernel_platform/common/android/abi_gki_protected_exports_* || true
          rm kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || true
          for script in \
            kernel_platform/common/scripts/setlocalversion \
            kernel_platform/msm-kernel/scripts/setlocalversion \
            kernel_platform/external/dtc/scripts/setlocalversion; do
            sed -i 's/ -dirty//g' "$script" || true
            sed -i '$i res=$(echo "$res" | sed '\''s/-dirty//g'\'')' "$script" || true
            sed -i '$s|echo "\$res"|echo "-FurLC"|' "$script" || true
          done

      - name: 注入KernelSU-SukiSU Ultra
        run: |
          set -e
          cd kernel_workspace/kernel_platform
          curl --retry 3 -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU-Ultra/main/kernel/setup.sh" | bash -s susfs-dev
          cd KernelSU
          KSU_VERSION=$(expr $(/usr/bin/git rev-list --count main) "+" 10606)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          sed -i "s/DKSU_VERSION=12800/DKSU_VERSION=${KSUVER}/" kernel/Makefile

      - name: 设置susfs并应用主补丁
        run: |
          set -e
          cd kernel_workspace
          git clone --depth=1 https://gitlab.com/simonpunk/susfs4ksu.git \
            -b gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}
          git clone --depth=1 https://github.com/SukiSU-Ultra/SukiSU_patch.git
          wget --retry-connrefused --waitretry=1 --read-timeout=20 --timeout=15 -t 3 https://raw.githubusercontent.com/FurLC/Action_OnePlus_KernelSU_SUSFS/main/ogki2gki.patch
          wget --retry-connrefused --waitretry=1 --read-timeout=20 --timeout=15 -t 3 https://raw.githubusercontent.com/FurLC/Action_OnePlus_KernelSU_SUSFS/main/ogki2gki_c99fix.patch
          cd kernel_platform
          PATCHDIR="../susfs4ksu/kernel_patches"
          SUKIPATCH="../SukiSU_patch"
          COMMON="./common"
          cp $PATCHDIR/50_add_susfs_in_gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}.patch $COMMON/ 2>/dev/null || true
          mkdir -p $COMMON/fs $COMMON/include/linux $COMMON/lib $COMMON/crypto
          cp $PATCHDIR/fs/* $COMMON/fs/ 2>/dev/null || true
          cp $PATCHDIR/include/linux/* $COMMON/include/linux/ 2>/dev/null || true
          cp -r $SUKIPATCH/other/zram/lz4k/include/linux/* $COMMON/include/linux/ 2>/dev/null || true
          cp -r $SUKIPATCH/other/zram/lz4k/lib/* $COMMON/lib/ 2>/dev/null || true
          cp -r $SUKIPATCH/other/zram/lz4k/crypto/* $COMMON/crypto/ 2>/dev/null || true
          cp -r $SUKIPATCH/other/zram/lz4k_oplus $COMMON/lib/ 2>/dev/null || true
          cp ../ogki2gki.patch $COMMON/
          cp ../ogki2gki_c99fix.patch $COMMON/
          cd $COMMON
          SUSFS_PATCH="50_add_susfs_in_gki-${{ github.event.inputs.ANDROID_VERSION }}-${{ github.event.inputs.KERNEL_VERSION }}.patch"
          if [[ -f "$SUSFS_PATCH" ]]; then
            if [[ "${{ github.event.inputs.FEIL }}" != "6.1" ]]; then
              sed -i 's/-32,12 +32,38/-32,11 +32,37/g' "$SUSFS_PATCH"
              sed -i '/#include <trace\/hooks\/fs.h>/d' "$SUSFS_PATCH"
            fi
            patch -p1 < "$SUSFS_PATCH" || true
          fi
          cp ../../SukiSU_patch/hooks/syscall_hooks.patch ./
          patch -p1 -F 3 < syscall_hooks.patch || true
          patch -p1 -F 3 < ogki2gki_c99fix.patch
          echo "✅ SUSFS 和 syscall_hooks patch 应用完成"

      - name: 应用zram相关补丁
        run: |
          set -e
          cd kernel_workspace/kernel_platform/common
          PATCH_LIST=(
            "lz4kd"
            "lz4k_oplus"
          )
          PATCH_BASE=../../SukiSU_patch/other/zram/zram_patch/${{ github.event.inputs.KERNEL_VERSION }}
          for PATCH_NAME in "${PATCH_LIST[@]}"; do
            PATCH_FILE="$PATCH_BASE/$PATCH_NAME.patch"
            LOCAL_PATCH="./$PATCH_NAME.patch"
            if [[ -f "$PATCH_FILE" ]]; then
              echo "🟢 应用补丁: $PATCH_NAME"
              cp "$PATCH_FILE" "$LOCAL_PATCH"
              patch -p1 -F 3 < "$LOCAL_PATCH" || echo "⚠️ $PATCH_NAME patch失败(已应用/冲突可忽略)"
              echo "" >> "./arch/arm64/configs/gki_defconfig"
            else
              echo "❗ 未找到$PATCH_NAME补丁 (kernel version ${{ github.event.inputs.KERNEL_VERSION }})"
            fi
          done

      - name: 写入SUSFS与ZRAM内核配置
        run: |
          set -e
          cd kernel_workspace/kernel_platform
          DEFCONFIG=./common/arch/arm64/configs/gki_defconfig
          if [ ! -f "$DEFCONFIG" ]; then echo "$DEFCONFIG 不存在"; exit 1; fi
          SUSFS_CONFIGS="
          CONFIG_KSU=y
          CONFIG_KPM=y
          CONFIG_KSU_SUSFS_SUS_SU=n
          CONFIG_KSU_MANUAL_HOOK=y
          CONFIG_KSU_SUSFS=y
          CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y
          CONFIG_KSU_SUSFS_SUS_PATH=y
          CONFIG_KSU_SUSFS_SUS_MOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y
          CONFIG_KSU_SUSFS_SUS_KSTAT=y
          CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n
          CONFIG_KSU_SUSFS_TRY_UMOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y
          CONFIG_KSU_SUSFS_SPOOF_UNAME=y
          CONFIG_KSU_SUSFS_ENABLE_LOG=y
          CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y
          CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y
          CONFIG_KSU_SUSFS_OPEN_REDIRECT=y
          "
          ZRAM_CONFIGS=""
          if [[ "${{ github.event.inputs.ZRAM }}" == "true" ]]; then
            ZRAM_CONFIGS="
            CONFIG_ZSMALLOC=y
            CONFIG_CRYPTO_LZ4HC=y
            CONFIG_CRYPTO_LZ4K=y
            CONFIG_CRYPTO_LZ4KD=y
            CONFIG_CRYPTO_842=y
            CONFIG_CRYPTO_LZ4K_OPLUS=y
            CONFIG_ZRAM_WRITEBACK=y
            "
          fi
          {
            echo ""
            echo "${SUSFS_CONFIGS}"
            if [[ -n "$ZRAM_CONFIGS" ]]; then
              echo ""
              echo "${ZRAM_CONFIGS}"
            fi
          } >> "$DEFCONFIG"
          sed -i 's/check_defconfig//' ./common/build.config.gki

      - name: 注入sched_ext调度模块
        run: |
          set -e
          cd kernel_workspace/kernel_platform/
          git clone --depth=1 https://github.com/HanKuCha/sched_ext.git
          cp -r sched_ext/* common/kernel/sched
          rm -rf sched_ext/.git
          cd common/kernel/sched

      - name: 编译内核
        run: |
          set -e
          cd kernel_workspace/kernel_platform/common
          echo ""
          echo "==== 磁盘空间 ===="
          df -h
          echo ""
          echo "==== 内存信息 ===="
          free -m
          echo ""
          export PATH="$GITHUB_WORKSPACE/kernel_workspace/kernel_platform/prebuilts/clang/host/linux-x86/clang-r487747c/bin:/usr/lib/ccache:$PATH"
          export MAKEFLAGS="-j${BUILD_THREADS}"
          ulimit -v 6000000
          if [[ "${{ github.event.inputs.KERNEL_VERSION }}" == "6.1" || "${{ github.event.inputs.KERNEL_VERSION }}" == "6.6" ]]; then
            make LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CC=clang O=out gki_defconfig
            make $MAKEFLAGS LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CC=clang \
              RUSTC=../../prebuilts/rust/linux-x86/1.73.0b/bin/rustc \
              PAHOLE=../../prebuilts/kernel-build-tools/linux-x86/bin/pahole O=out all 2>&1 | tee $GITHUB_WORKSPACE/kernel_build.log
          else
            cd $GITHUB_WORKSPACE/kernel_workspace
            LTO=thin ./kernel_platform/oplus/build/oplus_build_kernel.sh ${{ github.event.inputs.CPUD }} ${{ github.event.inputs.BUILD_METHOD }} 2>&1 | tee $GITHUB_WORKSPACE/kernel_build.log
          fi
          echo ""
          echo "==== 编译结束磁盘空间 ===="
          df -h
          echo ""
          echo "==== 编译结束内存信息 ===="
          free -m
          echo ""

      - name: 上传编译日志
        uses: actions/upload-artifact@v4
        with:
          name: kernel_build_log_${{ github.run_id }}
          path: kernel_build.log

      - name: 制作AnyKernel3内核刷机包
        run: |
          set -e
          git clone --depth=1 https://github.com/Kernel-SU/AnyKernel3 AnyKernel3-no_kpm
          git clone --depth=1 https://github.com/Kernel-SU/AnyKernel3 AnyKernel3-kpm
          rm -rf AnyKernel3-{kpm,no_kpm}/.git
          rm -f AnyKernel3-{kpm,no_kpm}/push.sh
          KERNEL_OUT_DIRS=(
            "kernel_workspace/kernel_platform/out/msm-kernel-${{ github.event.inputs.CPUD }}-gki/dist/"
            "kernel_workspace/kernel_platform/bazel-out/k8-fastbuild/bin/msm-kernel/${{ github.event.inputs.CPUD }}_gki_kbuild_mixed_tree/"
            "kernel_workspace/kernel_platform/out/msm-${{ github.event.inputs.CPUD }}-${{ github.event.inputs.CPUD }}-gki/dist/"
            "kernel_workspace/kernel_platform/out/msm-kernel-${{ github.event.inputs.CPUD }}-gki/gki_kernel/common/arch/arm64/boot/"
            "kernel_workspace/kernel_platform/out/msm-${{ github.event.inputs.CPUD }}-${{ github.event.inputs.CPUD }}-gki/gki_kernel/common/arch/arm64/boot/"
          )
          image_path=""
          for dir in "${KERNEL_OUT_DIRS[@]}"; do
            if [[ -f "${dir}Image" ]]; then
              image_path="${dir}Image"
              break
            fi
          done
          if [[ -z "$image_path" ]]; then
            image_path=$(find kernel_workspace/kernel_platform/common/out/ -name "Image" | head -n 1)
          fi
          if [[ -n "$image_path" && -f "$image_path" ]]; then
            cp "$image_path" AnyKernel3-no_kpm/Image
            echo "IMAGE_PATH=$image_path" >> $GITHUB_ENV
          else
            echo "未找到 Image 文件，构建可能失败"
            exit 1
          fi

      - name: Remove _uv suffix from FEIL
        id: feil_clean
        run: |
          set -e
          clean_feil="${{ github.event.inputs.FEIL }}"
          clean_feil="${clean_feil%_v}"
          clean_feil="${clean_feil%_u}"
          echo "value=$clean_feil" >> $GITHUB_OUTPUT

      - name: 上传AnyKernel3 (No_KPM)
        uses: actions/upload-artifact@v4
        with:
          name: AnyKernel3_SukiSU_Ultra_${{ env.KSUVER }}_${{ steps.feil_clean.outputs.value }}_NoKPM
          path: AnyKernel3-no_kpm/*

      - name: 应用KPM补丁并制作KPM刷机包
        run: |
          set -e
          echo "使用的 Image 路径是: $IMAGE_PATH"
          cd "$(dirname "$IMAGE_PATH")"
          cp Image $GITHUB_WORKSPACE/AnyKernel3-no_kpm/Image
          curl --retry 3 -LO https://github.com/ShirkNeko/SukiSU_KernelPatch_patch/releases/download/0.11-beta/patch_linux
          chmod +x patch_linux
          ./patch_linux
          rm -f Image
          mv oImage Image
          cp Image $GITHUB_WORKSPACE/AnyKernel3-kpm/Image
          cp Image $GITHUB_WORKSPACE/kernel_workspace/kernel

      - name: 上传AnyKernel3 (KPM)
        uses: actions/upload-artifact@v4
        with:
          name: AnyKernel3_SukiSU_Ultra_${{ env.KSUVER }}_${{ steps.feil_clean.outputs.value }}_KPM
          path: AnyKernel3-kpm/*

      - name: 下载、解压并查找zram内核模块
        if: ${{ github.event.inputs.ZRAM == 'true' }}
        run: |
          set -e
          URL=$(curl -s https://api.github.com/repos/FurLC/ZRAM-Module/releases/latest | \
            grep "browser_download_url" | grep "ZRAM-Module-.*\.zip" | cut -d '"' -f 4 | head -1)
          wget -O ZRAM-Module-${{ github.event.inputs.KERNEL_VERSION }}.zip "$URL"
          unzip ZRAM-Module-${{ github.event.inputs.KERNEL_VERSION }}.zip -d ZRAM-Module
          zram_path=$(find ./kernel_workspace -type f -name "zram.ko" -printf '%T@ %s %p\n' | sort -nr | awk '{print $3}' | head -n1)
          target="./ZRAM-Module/zram/zram.ko"
          if [ -n "$zram_path" ] && [ -f "$zram_path" ]; then
            echo "zram.ko定位于: $zram_path"
            cp "$zram_path" "$target"
            echo "zram.ko hash: $(sha256sum "$target")"
          else
            echo "未找到zram.ko文件，构建可能失败"
            exit 1
          fi

      - name: 上传ZRAM-Module
        uses: actions/upload-artifact@v4
        if: ${{ github.event.inputs.ZRAM == 'true' }}
        with:
          name: ZRAM-Module_${{ github.event.inputs.KERNEL_VERSION }}_${{ steps.feil_clean.outputs.value }}
          path: ZRAM-Module/*
